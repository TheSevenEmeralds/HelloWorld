<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_moe_stand_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_moe_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move = 0;
grav = 0.5;
hsp = 0;
vsp = 0;
image_speed = 0.25;
facing = 1;
mask_index = spr_moe_mask;
cj = 0;
food = 0;
win = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_down = keyboard_check_pressed(vk_down);

if (x &lt; 0)
{
    x += 6;
}
if (x &gt; 600)
{
    x -= 6;
}

//React to inputs
//move = key_left + key_right;
if (key_right)
{
    move = 1;
}
if (key_left)
{
    move = -1;
}
if (!key_right &amp;&amp; !key_left &amp;&amp; (!place_meeting(x,y+5,obj_snow)))
{
    move = 0;
}
hsp = move * 5;
if (vsp &lt; 10) vsp += grav;
if (vsp &gt;= 0) &amp;&amp; (cj = 0)
{
if (move = 1)
{
    sprite_index = spr_moe_walk_r;
    facing = 1;
}
if (move = -1)
{
    sprite_index = spr_moe_walk_l;
    facing = -1;
}
var inst = instance_nearest(x,y,obj_pig22);
if (inst != noone) &amp;&amp; (key_down) &amp;&amp; (distance_to_object(inst) &lt; 64)
{
    with(inst)
    {
        instance_destroy();
    }
    var pigg = instance_create(x+(facing*64),y,obj_pigT);
    with (pigg)
    {
        dir = other.facing;
    }
}
var inst = instance_nearest(x,y,obj_cow22);
if (inst != noone) &amp;&amp; (key_down) &amp;&amp; (distance_to_object(inst) &lt; 64)
{
    with(inst)
    {
        instance_destroy();
    }
    var pigg = instance_create(x+(facing*64),y,obj_cowT);
    with (pigg)
    {
        dir = other.facing;
    }
}
var zom = instance_place(x,y,obj_pigT);
if (zom != noone)
{
    with(zom)
    {
        instance_destroy();
    }
    with (obj_hud)
    {
        food1 -= 20;
    }
    food -= 20;
}
var zom = instance_place(x,y,obj_cowT);
if (zom != noone)
{
    with(zom)
    {
        instance_destroy();
    }
    with (obj_hud)
    {
        food1 -= 20;
    }
    food -= 20;
}
if (move = 0)
{
    if (facing = 1)
    {
        sprite_index = spr_moe_stand_r;
    }
    if (facing = -1)
    {
        sprite_index = spr_moe_stand_l;
    }
}
}
else if (vsp &lt; 0)
{
    cj = 1;
}
if (cj)
{
    if (move = 1)
    {
        sprite_index = spr_moe_jump_r;
        facing = 1;
    }
    if (move = -1)
    {
        sprite_index = spr_moe_jump_l;
        facing = -1;
    }
}
if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -10;
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    if (facing = -1)
    {
        sprite_index = spr_moe_stand_l;
    }
    if (facing = 1)
    {
        sprite_index = spr_moe_stand_r;
    }
}
x += hsp;

//reseting cj (check jump)
if (place_meeting(x,y+1,obj_wall))
{
    cj = 0;   
}

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

if (food &gt; 1000)
{
    win = 1;
}
var pig = instance_place(x,y,obj_pig22);
if (pig != noone)
{
    with(pig)
    {
        instance_destroy();
    }
    with (obj_hud)
    {
        food1 += 10;
    }
    food += 10;
}
var cow = instance_place(x,y,obj_cow22);
if (cow != noone)
{
    with(cow)
    {
        instance_destroy();
    }
    with (obj_hud)
    {
        food1 += 30;
    }
    food += 30;
}
var zom = instance_place(x,y,obj_zombie22);
if (zom != noone)
{
    with(zom)
    {
        instance_destroy();
    }
    with (obj_hud)
    {
        food1 -= 20;
    }
    food -= 20;
}

image_blend = c_blue;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
